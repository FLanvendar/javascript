自定义事件
父组件可以在使用子组件的地方直接用v-on来监听子组件触发的事件。
  每个vue实例都实现了事件接口，即
    使用$on(eventName)监听事件
    使用$emit(eventName)触发事件
举例：
<div id="counter-event-example">
        <p>{{ total }}</p>
        <button-counter v-on:increment="incrementTotal"></button-counter>
        <button-counter v-on:increment="incrementTotal"></button-counter>
</div>


   Vue.component('button-counter', {
       template:'<button v-on:click="incrementCounter">{{counter}}</button>',
       data:function () {
           return {
               counter: 0
           }
       },
       methods:{
           incrementCounter:function () {
               this.counter += 1
               this.$emit('increment')//触发increment事件
           }
       },
   })

    var example2 = new Vue({
        el: '#counter-event-example',
        data: {
            total:0
          },
        methods:{
          incrementTotal:function () {
              this.total += 1
          }
        }
    })

上面的例子中讲的特别浅，而且说的比较模糊。比如子组件向父组件如何传参等等都没有涉及。
这里结合众网友大神的理解，做一做补充：
首先子组件里有this.$emit('increment').子组件通知父组件。
vm.$emit(event [, ...args])是可以告知父组件，并携带一些参数过去。
父组件中，v-on:increment="incrementTotal"
  监听子组件有没有触发increment。若有，触发自己的incrementTotal函数。
个人感觉increment像一个连接的介质，两端为子组件和父组件。
子组件通过this.$emit（'介质'）传导。父组件通过v-on('介质')感受子组件。

给父组件绑定原生事件。
父组件可以监听子组件了。那如果想给父组件添加自定义事件怎么做？
举例：
<my-component v-on:click.native="dotheThing" ></my-component>
就是使用v-on的修饰符.native。
