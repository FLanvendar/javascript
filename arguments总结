此前在网易面试，聊到arguments，因为掌握太差，被面试官鄙视了一脸。
这里总结一下该对象的前前后后作为总结。

年少时期的我简直就是一个不知天高地厚的傻逼，看到之前的总结真想踹死自己。
一无所知，却又那么猖狂，真是惭愧啊。这里重新讨论这个问题。

1，类数组对象：
  对象定义时明明白白的写着：
    属性名可以为数字，比如：
	var obj = {
	  1:'yangyang'
	}
	还有，比如：
	var obj2 = {
	  '1':'xiaoming'
	}
	
	上面两种写法等价，在对象内部会把数字 1 转成字符串 1.
	然后很自然的就可以使用 obj[1] 和 obj2[1]
	
而arguments时，所谓的下标引用参数就是这么简单的存储而已。

说回类数组对象，就是一种对象，其元素属性从0开始排，然后加上一个length属性。（没看到反例，也没看到类数组对象的严格定义）

2，然后，说一说数组的slice方法。返回子数组  （  [1,2,3,4,5].slice(-2) instanceof Array //true  ）
  基本用法：
  array.slice(start [, end])
  
  比如：arr = [0,1,2,3,4,5];
   
   arr.slice(2) //2,3,4,5
   
   参数为负数表示从右边开始选。比如arr.slice(-1)
   
3,call的理解
   语法：fun.call(thisArg, arg1, arg2, ...)
   
   thisArg 是fun函数运行时指定的this值。
   
   arg1, arg2 指定的参数列表。也就是传给fun的参数。
   
   举个例子：
   
   function add(){
	console.log(this)
	if(arguments.length >=2){
		console.log(arguments)
		return arguments[0]+arguments[1]
	}
   }

var o = {
	0:1,
	1:5
}

add.call(o, 1,2,3)  

//this -> o
//Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]

所以，Array.prototype.slice.call(arguments);
    就等同于：
	this = arguments
	slice的作用是取一个子数组
	没有传参，就是把所有的元素都取出来，因此也就变成了数组。
	
	1.23、2018
 
--------------------------------第一次总结---------------------------------------------------------
	
arguments是一个类数组对象，是除了箭头函数外的所有函数都可用的局部变量。
arguments可以用下标索引来引用参数。
    arguments[0]
    arguments[1]
    arguments[2]
把arguments变成数组：（原因不明）
var args = Array.prototype.slice.call(arguments);
var args = [].slice.call(arguments);

// ES2015
const args = Array.from(arguments);
var args = [...arguments];

  // TODO:把这个问题细致化：一个对象写成
    {
     '0':1,
     '1':2,
     '2':3
    }
那么他就有中括号的那种下标关系。但是在上面调用slice函数，只返回空数组。
这是很大的不同点。

属性：arguments.callee 指向当前执行的函数
arguments.caller 指向调用当前函数的函数（废弃）
arguments.length 函数的参数数量




