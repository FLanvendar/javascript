使用插槽分发内容
  为了让组件可以组合，我们需要一种方式来混合父组件内容与子组件自己的模版，这个过程成为内容分发。vue使用特殊的<slot>元素作为原始内容的插槽。
1，编译作用域：
   父组件模版的内容在父组件作用域内编译，
   子组件模版的内容在子组件作用域内编译。
比如：
<child-component>{{msg}}</child-component>
msg是绑定到绑定到父组件的数据。

2，单个插槽
   除非子组件模版至少有一个<slot>插口，否则，父组件的内容将会被丢弃。
当子组件模版只有一个没有属性的插槽时，父组件传入的内容片段将插入到插槽所在的dom位置，并替换掉插槽标签本身。
   最初在<slot>标签中的任何内容都被视为备用内容。备用内容在子组件作用域内编译，并且只有在宿主元素为空，且没有要插入的内容时才显示备用内容。
  比如：
子组件模版：
<div>
  <h2>Im title of child-component</h2>
  <slot>只在没有分发内容时显示</slot>
</div>
父组件模版：
<div>
  <h1>我是父组件的标题</h1>
  <my-component>
    <p>这是一些初始内容</p>
    <p>这是更多的初始内容</p>
  </my-component>
</div>
注意：这两者说的都是在模版里的。最初理解所谓的父组件是dom，其实不是。
它是一个子组件，他的模版使用到了另外一个组件，仅此而已。
这父子组件取名真的有点乱。
把上面的例子补充完整：
    Vue.component('parent', {
        template:'<div>\n' +
        '  <h1>我是父组件的标题</h1>\n' +
        '  <my-component> <p>这是一些初始内容</p>\n' +
        '    <p>这是更多的初始内容</p></my-component>\n' +
        '</div>'
    })
    Vue.component('my-component',{
        template:'<div>\n' +
        '  <h2>我是子组件的标题</h2>\n' +
        '  <slot>\n' +
        '    只有在没有要分发的内容时才会显示。\n' +
        '  </slot>\n' +
        '</div>'
    })

3，具名插槽：
<slot>元素可以用一个name属性进一步配置如何进行内容分发。多个插槽可以有不同的名字。具名插槽将匹配内容片段中有对应slot特性的元素。可以有一个匿名插槽作为匹配不到内容片段的备用插槽。如果没，那些找不到匹配的内容片段就会被抛弃。
举例：
模版1：app-layout
<div class="container">
  <header>
    <slot name="header"></slot>
  </header>
  <main>
    <slot></slot>
  </main>
  <footer>
    <slot name="footer"></slot>
  </footer>
</div>
模板2：
<app-layout>
  <h1 slot="header">这里可能是一个页面标题</h1>
  <p>主要内容的一个段落。</p>
  <p>另一个主要段落。</p>
  <p slot="footer">这里有一些联系信息</p>
  <p>他也被放到匿名匹配里去了，从而期待的dom相对位置发生更改。
</app-layout>

结果是：
    这里可能是一个页面标题
    主要内容的一个段落。
    另一个主要段落。
    如果你真的匹配到了你就是真的皮（！！！！）
    这里有一些联系信息

注意感叹号那句和联系信息那句的位置。

4，作用域插槽
特殊插槽，用作一个（能被传递数据的）可重用模版，来代替已经渲染好的元素。
在子组件中，只需将数据传递到插槽，就像将prop传递给组件一样。
举例：
子组件child模版：
<div class="child">
  <slot text="hello from child"></slot>
</div>

父组件模版：
<div class="parent">
  <child>
    <template slot-scope="props">
      <span>hello from parent</span>
      <span>{{ props.text }}</span>
    </template>
  </child>
</div>
然后结果是：
hello from parenthello from child

怎么理解这个定义，我的感觉是，子组件可以要把想给父组件的内容放到作用域插槽里，父组件可以通过子组件插槽上的属性取到它。但是好像实现不了动态。就是子组件的作用域插槽内容，不会更改。是死的。
用处嘛，没发现。

理解补充：每个组件俺都有自己的作用域，组件的data只为本组件的template服务。
在slot中，匿名和具名分发，都是父组件替代子组件的数据（或者用子组件的默认数据）。两边数据不能共存。
  然而，作用域插槽通过slot的一个自定义属性，比如text，值为暴露的。这个自定义属性已经存放到子组件的prop里了，这样就能解耦。
  获取方式是：在任意的元素中使用slot-scope即可获取。
举例：
Vue.component('parent', {
        template:'<my-list>'+
          '<li slot-scope = "prop" class = "child-li">{{prop.text}}</li>' +
        '</my-list>',
    })
    Vue.component('my-list',{
        template:'<ul>'+
           '<slot '+
            'v-for="item in items"'+
                'v-bind:text="item.text">'+
                '</slot>'+
            '</ul>',
        data:function () {
            return {items:[
                {text:1},
                {text:2},
                {text:3}
            ]}
        }
    })





