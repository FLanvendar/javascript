这里探讨3个问题：
1，全局组件的限制性。
2，单文件组件及其优越性
3，关注点分离问题

1，全局组件的限制性
在小规模的项目中，使用Vue.component来定义全局组件，在用 new Vue({ el:'#container'})在每个页面内指定一个内容元素。这样确实还行。
但在更大更复杂的项目中，或者是前端完全由js驱动时，就会有以下明显的缺点：
    1），全局定义强制要求每个 component 中的命名不得重复
    2），字符串模板缺乏语法高亮，HTML多行时，要用丑陋的 “\”
    3），不支持 CSS，这意味着当 HTML 和 JavaScript 组件化时，CSS 明显被遗漏
    4），没有构建步骤， 限制只能使用 HTML 和 ES5 JavaScript, 而不能使用预处理器，如 Pug (formerly Jade) 和 Babel

2，单文件组件及其优越性
单文件组件，是一个后缀为.vue的组件。怎么编写高可用的单文件组件，是一个大学问，慢慢来。这里只说个大概
他具有：
    1），完整语法高亮
    2),CommonJS 模块
    3),组件作用域的 CSS
举例：
  <template>
    <h1>{{abc}}</h1>
</template>
<script>
    module.exports = {
      data: function () {
        return {
          abc: 'xiaomingxiao'
        }
      }
    }
</script>
<style>
    h1 {
        color: pink;
    }
</style>

3，关注点分离问题：
一个重要的事情值得注意，关注点分离不等于文件类型分离。在现代 UI 开发中，我们已经发现相比于把代码库分离成三个大的层次并将其相互交织起来，把它们划分为“松散耦合的组件”再将其组合起来更合理一些。在一个组件里，其模板、逻辑和样式是内部耦合的，并且把他们搭配在一起实际上使得组件更加内聚且更可维护。
即便你不喜欢单文件组件，你仍然可以把 JavaScript、CSS 分离成独立的文件然后做到热重载和预编译。
<!-- my-component.vue -->
<template>
  <div>This will be pre-compiled</div>
</template>
<script src="./my-component.js"></script>
<style src="./my-component.css"></style>


