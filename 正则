第N+1次总结正则了，但过后总是忘记。可能历次都是死记硬背不求甚解的锅吧。
这次作为第N+2次总结，希望能好好理解正则是怎样一回事。并用几个例子巩固一下。

1，字符：
\ 转意
^ 匹配一个输入或一行的开头。/^a/ 匹配a开头的字符串。
$ 匹配一个输入或一行的结尾。/a$/匹配a结尾的字符串。

*匹配前面元字符0+次，/ba*/会匹配b, ba,baa...
+匹配前面元字符1+次，/ba+/会匹配ba,baa...
?匹配前面元字符0或者1次，/ba?/会匹配b,ba

x|y 匹配x或y
{n}精准匹配n次
{n,}匹配n次以上。
{n,m}匹配n-m次

[xyz] 字符集， 匹配这个集合中的任意一个字符（或元字符）
[^xyz]  不匹配这个集合中的任意一个字符

\b 匹配一个单词的边界 ：记忆方式：boundary
\B 匹配一个单词的非边界 

\cX 这儿，X是一个控制符，/\cM/匹配Ctrl-M 记忆方式：ctrl + X

\d 匹配一个字数字符，/\d/ = /[0-9]/ 记忆方式：digital
\D 匹配一个非字数字符，/\D/ = /[^0-9]/ 

\s 匹配一个空白字符，包括\n,\r,\f,\t,\v等 记忆space
\S 匹配一个非空白字符，等于/[^\n\f\r\t\v]/ 

\w 匹配一个可以组成单词的字符(alphanumeric，这是我的意译，含数字)，包括下划线，如[\w]匹配"$5.98"中的5，等于[a-zA-Z0-9] 字母数字下划线~~
\W 匹配一个不可以组成单词的字符，如[\W]匹配"$5.98"中的$，等于[^a-zA-Z0-9]。

\n 匹配一个换行符 
\r 匹配一个回车符 
\t 匹配一个制表符 
\v 匹配一个重直制表符 


    分组，不捕获 和 断言

2，分组：分组在正则中用 "()"表示，起作用有2：
  1),将某些规律看成是一组，然后进行组级别的重复，可以得到意想不到的效果。
  2),分组之后，可以通过后项引用简化表达式(\1 或者 $1)

  比如：
    a):  \d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}  ：IP地址的匹配

    上面的  .\d{1,3}  重复了3次，可以把其看作一个组，再把这个组重复3次即可：
    \d{1,3}(.\d{1,3}){3}

    b):  拿匹配<title>xxx</title>标签来说，可以写为：
    
    <title>.*</title>

    两个title一样，可以通过分组简写。

    <(title)>.*</\1>

3，不捕获：
  分组捕获，会把括号中的东西放到内置变量 $1, $2,... 中。
  分组不捕获，不会暂用内置变量。。相应的更高效率一点。
  
  比如上面捕获标签的例子：

  <(?:title)>.*</\1> 后面的\1不是前面的title了，而是在前面的一个捕获分组。

4，断言：就是指明某个字符串前边或者后边，将会出现满足某种规律的字符串。（没懂，先挖个坑在这里~）

  就拿刚才的匹配 <title>xxx</title>来说，我们想要的是xxx,他没有规律，但
  如果前面有<title>  后面肯定有 </title>
  想指定xxx前肯定会出现<title>，就用正后发断言，表达式：(?<=<title>).*
  想指定xxx后边肯定会出现</title>，就用正先行断言，表达式：.*(?=</title>)

两个加在一起，就是(?<=<title>).*(?=</title>)

这样就能匹配到xxx，匹配的内容不包括断言的内容，即完整的匹配就是xxx，不会包含<title>和</title>,子组中也不包含。
2，练习：
1）core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source

解答：首先拆分一下：
[+-]?   (?:\d+\.|)  \d+   (?:[eE][+-]?\d+)
分别意思是：
  1，正符号有没有
  2,数字后面有或没有小数点
  3，科学记数法e,后面有或没有正负号，最最后面是1到多位数字
