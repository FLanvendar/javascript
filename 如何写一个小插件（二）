一个可复用的插件需要满足以下条件：

插件自身的作用域与用户当前的作用域相互独立，也就是插件内部的私有变量不能影响使用者的环境变量；
插件需具备默认设置参数；
插件除了具备已实现的基本功能外，需提供部分API，使用者可以通过该API修改插件功能的默认参数，从而实现用户自定义插件效果；
插件支持链式调用；
插件需提供监听入口，及针对指定元素进行监听，使得该元素与插件响应达到插件效果。

上一节写完了插件实现的基本结构，这里接着往下说。

1,插件的api
  插件的默认参数，我们知道，函数是可以设置默认参数的，而不管是否有传参，都可以返回一个值，告诉用户我做了什么处理。比如：
  function add(param) {
    var args = !!param?Array.prototype.slice.call(arguments):[];
    return args.reduce(function(pre,cur){
        return pre + cur;
    },0)
  }
    这里解释两点：1，args的初始化：其实可以直接写Array.prototype.slice.call(arguments)的，没必要用这个三目运算符。不知道这里用是基于什么的考量。
    2，reduce的用法不熟练。这里解释一下。系统用法会开一个博文做出总结，这里只解释基本用法，上面的意思是做出累加。

  把上面的默认参数的做法整合到插件里去。

  ;(function(undefined) {
    "use strict"
    var _global;

    function result(args,fn){
        var argsArr = Array.prototype.slice.call(args);
        if(argsArr.length > 0){
            return argsArr.reduce(fn);
        } else {
            return 0;
        }
    }
    var plugin = {
        add: function(){
            return result(arguments,function(pre,cur){
                return pre + cur;
            });
        },//加
        sub: function(){
            return result(arguments,function(pre,cur){
                return pre - cur;
            });
        },//减
        mul: function(){
            return result(arguments,function(pre,cur){
                return pre * cur;
            });
        },//乘
        div: function(){
            return result(arguments,function(pre,cur){
                return pre / cur;
            });
        }//除
        
    }

    // 最后将插件对象暴露给全局对象
    _global = (function(){ return this || (0, eval)('this'); }());
    if (typeof module !== "undefined" && module.exports) {
        module.exports = plugin;
    } else if (typeof define === "function" && define.amd) {
        define(function(){return plugin;});
    } else {
        !('plugin' in _global) && (_global.plugin = plugin);
    }
}());


2,插件的钩子：
插件的api就是插件暴露出来的方法和属性。比如，在上面中的那个。add等方法。
插件的api通常称为钩子（hook）

3,插件的链式调用。插件并非都是能链式调用的，但为了代码简介与方便，会采取链式调用。
那么如何实现链式。（利用原型链）

比如：function Calc(){}
Calc.prototype.add = function(){return this;}

那么，在上面的插件中，可以：
 // plugin.js
;(function(undefined) {
    "use strict"
    var _global;

    function result(args,type){
        var argsArr = Array.prototype.slice.call(args);
        if(argsArr.length == 0) return 0;
        switch(type) {
            case 1: return argsArr.reduce(function(p,c){return p + c;});
            case 2: return argsArr.reduce(function(p,c){return p - c;});
            case 3: return argsArr.reduce(function(p,c){return p * c;});
            case 4: return argsArr.reduce(function(p,c){return p / c;});
            case 5: return argsArr.reduce(function(p,c){return p % c;});
            default: return 0;
        }
    }

    function Calculate(){}
    Calculate.prototype.add = function(){console.log(result(arguments,1));return this;}
    Calculate.prototype.sub = function(){console.log(result(arguments,2));return this;}
    Calculate.prototype.mul = function(){console.log(result(arguments,3));return this;}
    Calculate.prototype.div = function(){console.log(result(arguments,4));return this;}
    Calculate.prototype.sur = function(){console.log(result(arguments,5));return this;}


    // 最后将插件对象暴露给全局对象
    _global = (function(){ return this || (0, eval)('this'); }());
    if (typeof module !== "undefined" && module.exports) {
        module.exports = Calculate;
    } else if (typeof define === "function" && define.amd) {
        define(function(){return Calculate;});
    } else {
        !('Calculate' in _global) && (_global.Calculate = Calculate);
    }
}());

var plugin = new Calculate();
plugin
    .add(2,1)
    .sub(2,1)
    .mul(2,1)
    .div(2,1)
    .sur(2,1);
// 结果：
// 3
// 1
// 2
// 2
// 0

处理的挺复杂的，但貌似也没有更好的办法了。

4,插件的监听
（观察者模式，没太明白，不做展开。好想写个玩一玩。）
 
  
